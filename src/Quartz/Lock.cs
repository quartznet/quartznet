// https://raw.githubusercontent.com/SimonCropp/Polyfill/refs/heads/main/src/Polyfill/Lock.cs

// <auto-generated />
#pragma warning disable

#nullable enable

#if !NET9_0_OR_GREATER

namespace System.Threading;

using Diagnostics;
using Diagnostics.CodeAnalysis;

/// <summary>
/// Provides a way to get mutual exclusion in regions of code between different threads. A lock may be held by one thread at
/// a time.
/// </summary>
[ExcludeFromCodeCoverage]
[DebuggerNonUserCode]
//Link: https://learn.microsoft.com/en-us/dotnet/api/system.threading.lock
#if PolyPublic
public
#endif
class Lock
{
#if NETCOREAPP || NETFRAMEWORK || NETSTANDARD
    public bool IsHeldByCurrentThread => Monitor.IsEntered(this);
#endif

    /// <summary>
    /// Enters the lock. Once the method returns, the calling thread would be the only thread that holds the lock.
    /// </summary>
    public void Enter() => Monitor.Enter(this);

    /// <summary>
    /// Tries to enter the lock without waiting. If the lock is entered, the calling thread would be the only thread that
    /// holds the lock.
    /// </summary>
    /// <returns>
    /// <code>true</code> if the lock was entered, <code>false</code> otherwise.
    /// </returns>
    public bool TryEnter() => Monitor.TryEnter(this);

    /// <summary>
    /// Tries to enter the lock, waiting for roughly the specified duration. If the lock is entered, the calling thread
    /// would be the only thread that holds the lock.
    /// </summary>
    /// <param name="timeout">
    /// The rough duration for which the method will wait if the lock is not available. The timeout is converted to a number
    /// of milliseconds by casting <see cref="TimeSpan.TotalMilliseconds"/> of the timeout to an integer value. A value
    /// representing <code>0</code> milliseconds specifies that the method should not wait, and a value representing
    /// <see cref="Timeout.Infinite"/> or <code>-1</code> milliseconds specifies that the method should wait indefinitely
    /// until the lock is entered.
    /// </param>
    /// <returns>
    /// <code>true</code> if the lock was entered, <code>false</code> otherwise.
    /// </returns>
    public bool TryEnter(TimeSpan timeout) =>
        Monitor.TryEnter(this, timeout);

    /// <summary>
    /// Tries to enter the lock, waiting for roughly the specified duration. If the lock is entered, the calling thread
    /// would be the only thread that holds the lock.
    /// </summary>
    /// <param name="millisecondsTimeout">
    /// The rough duration in milliseconds for which the method will wait if the lock is not available. A value of
    /// <code>0</code> specifies that the method should not wait, and a value of <see cref="Timeout.Infinite"/> or
    /// <code>-1</code> specifies that the method should wait indefinitely until the lock is entered.
    /// </param>
    /// <returns>
    /// <code>true</code> if the lock was entered, <code>false</code> otherwise.
    /// </returns>
    public bool TryEnter(int millisecondsTimeout) =>
        TryEnter(TimeSpan.FromMilliseconds(millisecondsTimeout));

    /// <summary>
    /// Exits the lock.
    /// </summary>
    public void Exit() => Monitor.Exit(this);

    /// <summary>
    /// Enters the lock and returns a <see cref="Scope"/> that may be disposed to exit the lock. Once the method returns,
    /// the calling thread would be the only thread that holds the lock. This method is intended to be used along with a
    /// language construct that would automatically dispose the <see cref="Scope"/>, such as with the C# <code>using</code>
    /// statement.
    /// </summary>
    /// <returns>
    /// A <see cref="Scope"/> that may be disposed to exit the lock.
    /// </returns>
    public Scope EnterScope()
    {
        Enter();
        return new Scope(this);
    }

    /// <summary>
    /// A disposable structure that is returned by <see cref="EnterScope()"/>, which when disposed, exits the lock.
    /// </summary>
    public readonly ref struct Scope(Lock owner)
    {
        /// <summary>
        /// Exits the lock.
        /// </summary>
        public void Dispose() => owner.Exit();
    }
}

#else
using System.Runtime.CompilerServices;
[assembly: TypeForwardedTo(typeof(System.Threading.Lock))]
#endif